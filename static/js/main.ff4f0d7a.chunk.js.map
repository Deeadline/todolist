{"version":3,"sources":["components/Layout/Layout.js","utils/colors.js","components/TodoInput/TodoInput.js","store/actions/todoActions.js","store/actions/todoTypes.js","components/Filters/Filters.js","components/TodosList/TodosList.js","containers/App.js","store/selectors/index.js","serviceWorker.js","store/reducers/todoReducer.js","store/reducers/index.js","store/index.js","index.js"],"names":["GlobalStyles","createGlobalStyle","_templateObject","StyledMain","styled","main","_templateObject2","Layout","_ref","children","react_default","a","createElement","Fragment","Helmet","href","rel","colors","InputContainer","form","TodoInput_templateObject","Input","input","TodoInput_templateObject2","Button","button","_templateObject3","TodoInput","value","handleSubmit","handleChange","onSubmit","placeholder","onChange","event","target","addTodo","createAction","setFilter","toggleTodo","StyledFilters","div","Filters_templateObject","FiltersGroup","Filters_templateObject2","Filters_templateObject3","Filters","handleFilterChange","Filters_Button","onClick","StyledTodosList","ul","TodosList_templateObject","Todo","li","TodosList_templateObject2","props","done","css","TodosList_templateObject3","TodosList","todos","renderTodos","map","todo","index","text","TodoList","App_templateObject","Header","header","App_templateObject2","StyledTitle","h1","App_templateObject3","connect","state","createSelector","filter","visibilityFilter","console","log","getVisibleTodos","todoReducer","dispatch","todoActions","bindActionCreators","_useState","useState","_useState2","Object","slicedToArray","todoText","setTodoText","Layout_Layout","TodoInput_TodoInput","preventDefault","Filters_Filters","TodosList_TodosList","Boolean","window","location","hostname","match","INITIAL_STATE","reducers","combineReducers","arguments","length","undefined","action","type","objectSpread","concat","toConsumableArray","payload","date","Date","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","es","containers_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ff4f0d7a.chunk.js","sourcesContent":["import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport styled, { createGlobalStyle } from 'styled-components';\n\nconst GlobalStyles = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n  }\n\n  html, body, #root {\n    width: 100%;\n    height: 100%;\n  }\n\n  body {\n    font-family: 'Roboto', sans-serif;\n    font-size: 18px;\n  }\n`;\n\nconst StyledMain = styled.main`\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Layout = ({ children }) => {\n  return (\n    <>\n      <GlobalStyles />\n      <Helmet>\n        <title>Todolist</title>\n        <link\n          href='https://fonts.googleapis.com/css?family=Roboto:300,400,500'\n          rel='stylesheet'\n        />\n      </Helmet>\n      <StyledMain>{children}</StyledMain>\n    </>\n  );\n};\n","export default {\n  white: '#ecf0f1',\n  lightGray: '#ecf0f1',\n  gray: '#95a5a6',\n  red: '#c0392b',\n  blue: '#3498db',\n  green: '#2ecc71'\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\nimport colors from '../../utils/colors';\n\nconst InputContainer = styled.form`\n  width: 100%;\n  border-bottom: 1px solid ${colors.lightGray};\n  display: grid;\n  grid-template-columns: 1fr 3rem;\n  box-shadow: 0px 0px 20px -10px rgba(0, 0, 0, 0.75);\n`;\n\nconst Input = styled.input`\n  width: 100%;\n  padding: 1rem;\n  font-size: 1rem;\n  font-weight: 500;\n  border: none;\n  color: ${colors.gray};\n`;\n\nconst Button = styled.button`\n  width: 100%;\n  height: 100%;\n  background: ${colors.blue};\n  color: ${colors.white};\n  font-size: 2rem;\n  border: none;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const TodoInput = ({ value, handleSubmit, handleChange }) => {\n  return (\n    <InputContainer onSubmit={handleSubmit}>\n      <Input\n        value={value}\n        placeholder='Input todo...'\n        onChange={(event) => handleChange(event.target.value)}\n      />\n      <Button>+</Button>\n    </InputContainer>\n  );\n};\n\nTodoInput.propTypes = {\n  value: PropTypes.string.isRequired,\n  handleSubmit: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired\n};\n","import * as types from './todoTypes';\nimport { createAction } from 'redux-actions';\n\nexport const addTodo = createAction(types.ADD_TODO);\nexport const setFilter = createAction(types.SET_FILTER);\nexport const toggleTodo = createAction(types.TOGGLE_TODO);\n","export const ADD_TODO = `ADD_TODO`;\nexport const SET_FILTER = `SET_FILTER`;\nexport const TOGGLE_TODO = `TOGGLE_TODO`;\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst StyledFilters = styled.div`\n  width: 100%;\n  padding: 1rem;\n  display: grid;\n  grid-template-columns: 5rem 1fr;\n  grid-gap: 1rem;\n`;\n\nconst FiltersGroup = styled.div``;\n\nconst Button = styled.button`\n  padding: 0 1rem;\n  border: none;\n  background: transparent;\n`;\n\nexport const Filters = ({ handleFilterChange }) => {\n  return (\n    <StyledFilters>\n      <span>FILTERS:</span>\n      <FiltersGroup>\n        <Button onClick={() => handleFilterChange('SHOW_ALL')}>ALL</Button>\n        <Button onClick={() => handleFilterChange('SHOW_TODO')}>TODO</Button>\n        <Button onClick={() => handleFilterChange('SHOW_DONE')}>DONE</Button>\n      </FiltersGroup>\n    </StyledFilters>\n  );\n};\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport colors from '../../utils/colors';\n\nconst StyledTodosList = styled.ul`\n  width: 100%;\n  list-style-type: none;\n  display: flex;\n  flex-direction: column;\n`;\n\nconst Todo = styled.li`\n  width: 100%;\n  padding: 1rem;\n  border-left: 5px solid ${colors.red};\n  cursor: pointer;\n\n  ${(props) =>\n    props.done &&\n    css`\n      border-left: 5px solid ${colors.green};\n    `}\n`;\n\nexport const TodosList = ({ todos, toggleTodo }) => {\n  const renderTodos = todos.map((todo, index) => (\n    <Todo done={todo.done} onClick={() => toggleTodo(index)}>\n      {todo.text}\n    </Todo>\n  ));\n\n  return <StyledTodosList>{renderTodos}</StyledTodosList>;\n};\n","import React, { useState } from 'react';\nimport styled from 'styled-components';\nimport { Layout } from '../components/Layout/Layout';\nimport colors from '../utils/colors';\nimport { TodoInput } from '../components/TodoInput/TodoInput';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport * as todoActions from '../store/actions/todoActions';\nimport { Filters } from '../components/Filters/Filters';\nimport { TodosList } from '../components/TodosList/TodosList';\nimport { makeGetFilteredTodos } from '../store/selectors';\n\nconst TodoList = styled.div`\n  width: 40%;\n  box-shadow: 0px 0px 50px -20px rgba(0, 0, 0, 0.75);\n  max-height: 40rem;\n`;\n\nconst Header = styled.header`\n  display: grid;\n  grid-template-columns: 1fr 4rem;\n  padding: 1rem;\n  border-bottom: 1px solid ${colors.lightGray};\n  color: ${colors.red};\n`;\n\nconst StyledTitle = styled.h1`\n  font-size: 1em;\n  margin: 0;\n`;\n\nconst App = ({ todos, todoActions }) => {\n  const [todoText, setTodoText] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    todoActions.addTodo(todoText);\n    setTodoText('');\n  };\n\n  return (\n    <Layout>\n      <TodoList>\n        <Header>\n          <StyledTitle>Todolist</StyledTitle>\n        </Header>\n        <TodoInput\n          value={todoText}\n          handleSubmit={handleSubmit}\n          handleChange={setTodoText}\n        />\n        <Filters handleFilterChange={todoActions.setFilter} />\n        <TodosList todos={todos} toggleTodo={todoActions.toggleTodo} />\n      </TodoList>\n    </Layout>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  const getVisibleTodos = makeGetFilteredTodos();\n\n  return {\n    todos: getVisibleTodos(state.todoReducer)\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  todoActions: bindActionCreators(todoActions, dispatch)\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import { createSelector } from 'reselect';\n\nexport const makeGetFilteredTodos = () => {\n  return createSelector(\n    (state) => state.filter,\n    (state) => state.todos,\n    (visibilityFilter, todos) => {\n      console.log(visibilityFilter);\n      switch (visibilityFilter) {\n        case 'SHOW_TODO':\n          return todos.filter((todo) => !todo.done);\n        case 'SHOW_DONE':\n          return todos.filter((todo) => todo.done);\n        default:\n          return todos;\n      }\n    }\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as types from '../actions/todoTypes';\n\nconst INITIAL_STATE = {\n  filter: 'SHOW_ALL',\n  todos: []\n};\n\nexport const todoReducer = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case types.ADD_TODO:\n      return {\n        ...state,\n        todos: [\n          ...state.todos,\n          {\n            text: action.payload,\n            done: false,\n            date: new Date()\n          }\n        ]\n      };\n\n    case types.SET_FILTER:\n      return {\n        ...state,\n        filter: action.payload\n      };\n\n    case types.TOGGLE_TODO:\n      return {\n        ...state,\n        todos: state.todos.map((todo, index) => {\n          if (index === action.payload) {\n            return {\n              ...todo,\n              done: !todo.done\n            };\n          }\n\n          return todo;\n        })\n      };\n\n    default: {\n      return state;\n    }\n  }\n};\n","import { combineReducers } from 'redux';\nimport { todoReducer } from './todoReducer';\n\nexport const reducers = combineReducers({ todoReducer });\n","import { createStore } from 'redux';\nimport { reducers } from './reducers';\n\nexport const store = createStore(\n  reducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { store } from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}